const Query=require("./query.min"),{fReturn:fReturn,iString:iString}=require("bimn");class BimServer extends Query{constructor(e){super(),this.loadModal(e)}bimRequest(e){const t=e.get(),r=fReturn(t,["where","orwhere","wherelike","with","between","groupby","offset","limit","orderby"]);for(let e in r)"where"===e&&this.where(r[e]),"orwhere"===e&&this.orwhere(r[e]),"wherelike"===e&&this.wherelike(r[e]),"with"===e&&this.with(r[e]),"between"===e&&this.between(r[e]),"groupby"===e&&this.groupby(r[e]),"offset"===e&&this.offset(r[e]),"limit"===e&&this.limit(r[e]),"orderby"===e&&this.orderby(r[e]);if(!iString(t.paginate))return iString(t.first)&&"true"===t.first?this.modal.first():this.modal.fetch();if(/^[0-9]+$/.test(t.paginate))return this.modal.paginate(parseInt(t.paginate));if(/^[0-9]+\|[0-9]+$/.test(t.paginate)){const e=t.paginate.match(/(^[0-9]+)\|([0-9]+)$/);let r=parseInt(e[1]),i=parseInt(e[2]);return this.modal.paginate(i,r)}}}module.exports=BimServer;
