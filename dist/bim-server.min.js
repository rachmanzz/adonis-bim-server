const Query=require("./query.min"),{fReturn:fReturn,iString:iString}=require("bimn");class BimServer extends Query{constructor(e){super(),this.loadModel(e),this.oprator={sq:"<=",s:"<",bq:">=",b:">",n:"!="}}bimRequest(e){const t=e.get();this._req=fReturn(t,["paginate","first"]);const r=fReturn(t,["where","orwhere","wherelike","with","between","groupby","offset","limit","orderby"]);for(let e in r)"where"===e&&this.where(r[e]),"orwhere"===e&&this.orwhere(r[e]),"wherelike"===e&&this.wherelike(r[e]),"with"===e&&this.with(r[e]),"between"===e&&this.between(r[e]),"groupby"===e&&this.groupby(r[e]),"offset"===e&&this.offset(r[e]),"limit"===e&&this.limit(r[e]),"orderby"===e&&this.orderby(r[e]);return this}finally(){const e=this._req;if(!iString(e.paginate))return iString(e.first)&&"true"===e.first?this.model.first():this.model.fetch();if(/^[0-9]+$/.test(e.paginate))return this.model.paginate(parseInt(e.paginate));if(/^[0-9]+\|[0-9]+$/.test(e.paginate)){const t=e.paginate.match(/(^[0-9]+)\|([0-9]+)$/);let r=parseInt(t[1]),i=parseInt(t[2]);return this.model.paginate(i,r)}}}module.exports=BimServer;
