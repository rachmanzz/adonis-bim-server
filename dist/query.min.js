const{isArray:isArray,iString:iString,isNotUndef:isNotUndef}=require("bimn");class Query{loadModel(t){this.model=t,this.oprator={sq:"<=",s:"<",bq:">=",b:">",n:"!="}}where(t){if(isArray(t)){const e=t.length;for(let r=0;r<e;r++){let e=t[r];this._where(e)}}iString(t)&&this._where(t)}orwhere(t){if(isArray(t)){const e=t.length;for(let r=0;r<e;r++){let e=t[r];this._orWhere(e)}}iString(t)&&this._orWhere(t)}_where(t){if(iString(t)){if(/^[\w\d]+\|[\w\d]+$/.test(t)){const e=t.match(/(^[\w\d]+)\|([\w\d]+)$/);let r=e[1],i=e[2];this.model.where(r,i)}if(/^[\w\d]+\|[\w\d]+\|[\w\d]+$/.test(t)){const e=t.match(/(^[\w\d]+)\|([\w\d]+)\|([\w\d]+)$/),r=e[1],i=e[2],s=e[3];isNotUndef(this.oprator[s])&&this.model.where(r,this.oprator[s],i)}if(/^[\w\d]+\|\![0-9]+$/.test(t)){const e=t.match(/(^[\w\d]+)\|\!([0-9]+)$/);let r=e[1],i=parseInt(e[2]);this.model.where(r,i)}if(/^[\w\d]+\|\![0-9]+\|[\w\d]+$/.test(t)){const e=t.match(/(^[\w\d]+)\|\!([0-9]+)\|([\w\d]+)$/),r=e[1],i=parseInt(e[2]),s=e[3];isNotUndef(this.oprator[s])&&this.model.where(r,this.oprator[s],i)}}}_orWhere(t){if(iString(t)){if(/^[\w\d]+\|[\w\d]+$/.test(t)){const e=t.match(/(^[\w\d]+)\|([\w\d]+)$/);let r=e[1],i=e[2];this.model.orWhere(r,i)}if(/^[\w\d]+\|[\w\d]+\|[\w\d]+$/.test(t)){const e=t.match(/(^[\w\d]+)\|([\w\d]+)\|([\w\d]+)$/),r=e[1],i=e[2],s=e[3];isNotUndef(this.oprator[s])&&this.model.orWhere(r,this.oprator[s],i)}if(/^[\w\d]+\|\![0-9]+$/.test(t)){const e=t.match(/(^[\w\d]+)\|\!([0-9]+)$/);let r=e[1],i=parseInt(e[2]);this.model.orWhere(r,i)}if(/^[\w\d]+\|\![0-9]+\|[\w\d]+$/.test(t)){const e=t.match(/(^[\w\d]+)\|\!([0-9]+)\|([\w\d]+)$/),r=e[1],i=parseInt(e[2]),s=e[3];isNotUndef(this.oprator[s])&&this.model.orWhere(r,this.oprator[s],i)}}}_between(t){if(/^[\w\d]+\|[0-9]+\-[0-9]+$/.test(t)){const e=t.match(/(^[\w\d]+)\|([0-9]+)\-([0-9]+)$/);let r=e[1],i=parseInt(e[2]),s=parseInt(e[3]);this.model.whereBetween(r,[i,s])}}_whereLike(t){if(/^[\w\d]+\|[\w\d\,_]+\|[\w\d]+$/.test(t)){const e=t.match(/(^[\w\d]+)\|([\w\d\,_]+)\|([\w\d]+)$/);let r=e[1],i=e[2],s=e[3];isNotUndef(s)&&this.model.whereRaw(r+" LIKE ?",[this._likeGen(s,i)])}}_likeGen(t,e){var r=e;switch(t){case"start_with":r=e+"%";break;case"end_with":r="%"+e;break;case"any_position":r="%"+e+"%";break;case"start_with_end":const i=e.split(",");r=isArray(i)?i[0]+"%"+i[0]:i;break;default:r=e}return r}wherelike(t){if(isArray(t)){const e=t.length;for(let r=0;r<e;r++){let e=t[r];this._whereLike(e)}}iString(t)&&this._whereLike(t)}between(t){if(isArray(t)){const e=t.length;for(let r=0;r<e;r++){let e=t[r];this._between(e)}}iString(t)&&this._between(t)}groupby(t){this.model.groupBy(t)}offset(t){this.model.offset(parseInt(t))}limit(t){this.model.limit(parseInt(t))}_orderBy(t){if(/^[\w\d]+\|asc$|^[\w\d]+\|desc$/.test(obj.orderby)){const t=obj.orderby.match(/(^[\w\d]+)\|([\w\d]+)$/),e=t[1],r=t[2];this.model.orderBy(e,r)}}orderby(t){if(isArray(t)){const e=t.length;for(let r=0;r<e;r++){let e=t[r];this._orderBy(e)}}iString(t)&&this._orderBy(t)}_with(t){this.model.with(t)}with(t){if(isArray(t)){const e=t.length;for(let r=0;r<e;r++){let e=t[r];this._with(e)}}iString(t)&&this._with(t)}}module.exports=Query;
